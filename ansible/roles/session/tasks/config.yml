---
# Config pre-tasks

# Config tasks
- name: "config : Configure of the session ID"
  pause:
   prompt: "What is your session ID ?"
  register: sessionID
  delegate_to: localhost
  when: libre_session is undefined and session_id is undefined
- name: "config : Register session_id fact"
  set_fact: 
    session_id: "{{ sessionID.user_input }}"
    hasChanged: true
  when: libre_session is undefined and sessionID.user_input is defined
- name: "config : Session ID doesn't match a good number"
  fail: msg="You must give a good Session ID"
  when: libre_session is undefined and session_id|default('')|string == ""
- name: "config : Configure of the session token"
  pause:
   prompt: "What is the coresponding session token ?"
   echo: no
  register: sessionToken
  delegate_to: localhost
  when: libre_session is undefined and session_token is undefined
- name: "config : Register session_token fact"
  set_fact: 
    session_token: "{{ sessionToken.user_input }}"
    hasChanged: true
  when: libre_session is undefined and sessionToken.user_input is defined
- name: "config : Session token doesn't match a good token"
  fail: msg="You must give a good Session token"
  when: libre_session is undefined and session_token|default('')|string == ""
- name: "config : Set configuration has changed if config file are missing"
  set_fact: 
    hasChanged: true
  when: libre_session is undefined and r_session_conf_details.results[0].stat.exists != true

- name: "config : Calling Google API backend for session"
  uri:
    url: "{{ r_session_gapi_session }}"
    method: POST
    body: "session={{ session_id }}&token={{ session_token }}"
    status_code: 200
    return_content: yes
    follow_redirects: all
  register: gapi_session_return
  when: hasChanged is not undefined 
- name: "config : Check google HTTP response code"
  fail: msg="Could not configure session because Google API return a bad HTTP {{ gapi_session_return.status }} response code"
  when: hasChanged is not undefined and gapi_session_return.status|string != "200"
- name: "config : Check google HTTP content is JSON"
  fail: msg="Could not configure session because Google API return a non-json body content"
  when: hasChanged is not undefined and gapi_session_return.json is undefined
- name: "config : Check google HTTP content application return code"
  fail: msg="Could not configure session because Google API response tell {{ gapi_session_return.json.message }}"
  when: hasChanged is not undefined and gapi_session_return.json.code != "ok"
- name: "config : Extract google API returned data"
  set_fact: 
    course_id: "{{ gapi_session_return.json.data.cours }}"
    session_id: "{{ gapi_session_return.json.data.id }}"
    session_instructor: "{{ gapi_session_return.json.data.instructor }}"
    session_type: "{{ gapi_session_return.json.data.type }}"
    session_state: "{{ gapi_session_return.json.data.state }}"
    session_start: "{{ gapi_session_return.json.data.start }}"
    session_stop: "{{ gapi_session_return.json.data.stop }}"
    session_commentToTrainer: "{{ gapi_session_return.json.data.commentToTrainer }}"
    session_commentToFacility: "{{ gapi_session_return.json.data.commentToFacility }}"
    session_commentFromTrainer: "{{ gapi_session_return.json.data.commentFromTrainer }}"
    session_students: "{{ gapi_session_return.json.data.students }}"
  when: hasChanged is not undefined 

- name: "config : Generate session config file {{ r_session_dir_conf }}/{{ r_libre_config_file_session }}"
  template:
    src: templates/libre-session.j2
    dest: "{{ r_session_dir_conf }}/{{ r_libre_config_file_session }}"
    mode: 0664
    owner: "{{ r_session_user }}"
    group: "{{ r_session_group }}"
  become: yes
  when: hasChanged is not undefined

- name: "config : Create ansible local facts links"
  file:
    state: link
    src: "{{ r_session_dir_conf }}/{{ conf.file }}"
    dest: "{{ r_session_dir_facts }}/{{ conf.key }}.fact"
    mode: 0664
    owner: root
    group: root
  become: yes
  when: hasChanged is not undefined and r_session_conflinks_details.results[0].stat.exists != true
  loop: "{{ r_session_conf_list }}"
  loop_control:
    loop_var: conf
- name: "config : Gathering fresh facts to get LIBRE configuration"
  setup:
  register: r_session_freshFacts
  when: libre_session is undefined
- name: "config : Check if local configuration are in fresh facts"
  fail: msg="Could not find local configuration in ansible_local facts. Check your config directory {{ r_session_dir_conf }} and {{ r_session_dir_facts }}"
  when: 
    - libre_session is undefined
    - (r_session_freshFacts is undefined or r_session_freshFacts.ansible_facts is undefined or r_session_freshFacts.ansible_facts.ansible_local is undefined)
- name: "config : Check if session configuration is in fresh facts"
  fail: msg="Could not find session configuration {{ r_libre_config_file_session }} in ansible_local facts"
  when: 
    - libre_session is undefined
    - (r_session_freshFacts.ansible_facts.ansible_local.session is undefined or r_session_freshFacts.ansible_facts.ansible_local.session == "error loading fact - please check content")
- name: "config : Reload session file details from {{ r_session_dir_facts }} facts"
  stat:
    path: "{{ r_session_dir_facts }}/{{ conf.key }}.fact"
  loop: "{{ r_session_conf_list }}"
  loop_control:
    loop_var: conf
  when: libre_session is undefined
- name: "config : Reload session configuration facts from fresh facts"
  set_fact: 
    libre_session: "{{ r_session_freshFacts.ansible_facts.ansible_local.session }}"
  when: libre_session is undefined
  
  
- name: "config : Log config action"
  include_role:
    name: libre
    tasks_from: lib/log
  vars: 
    log_name: "Session is configured"
    log_component: session
    log_action: config