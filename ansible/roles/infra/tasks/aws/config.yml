---
- name: "aws : config : Session id exist"
  assert:
    msg: "Session id must be defined in {{ r_session_config_file }}"
    that: "libre_session.id is defined"
- name: "aws : config : Course id exist"
  assert:
    msg: "Session course must be defined in {{ r_session_config_file }}"
    that: "libre_session.course is defined"

- name: "aws : config : Configure AWS access key"
  pause:
   prompt: "What is your AWS Access key ({{ infra_aws_access_key|default('') }}) ?"
  register: aws_access_key
  when: infra_aws_access_key is undefined or force_setup
- name: "aws : config : Register infra_aws_access_key fact"
  set_fact:
    infra_aws_access_key: "{{ aws_access_key.user_input }}"
  when: (infra_aws_access_key is undefined or force_setup) and aws_access_key.user_input is defined
- name: "aws : config : Configure AWS access key"
  pause:
   prompt: "What is your AWS Access key ({{ infra_aws_secret_key|default('') }}) ?"
  register: aws_secret_key
  when: infra_aws_secret_key is undefined or force_setup
- name: "aws : config : Register infra_aws_secret_key fact"
  set_fact:
    infra_aws_secret_key: "{{ aws_secret_key.user_input }}"
  when: (infra_aws_secret_key is undefined or force_setup) and aws_secret_key.user_input is defined

- name: "aws : config : Get {{ r_infra_dir_conf }}/{{ r_infra_config_file }} config file details"
  stat:
    path: "{{ r_infra_dir_conf }}/{{ r_infra_config_file }}"
  register: r_infra_conf_details
- name: "aws : config : Generate infrastructure config file {{ r_infra_dir_conf }}/{{ r_infra_config_file }}"
  template:
    src: templates/libre-infra.j2
    dest: "{{ r_infra_dir_conf }}/{{ r_infra_config_file }}"
    mode: 0664
    owner: "{{ r_session_user }}"
    group: "{{ r_session_group }}"
  become: yes
  when: r_infra_conf_details.stat.exists != true